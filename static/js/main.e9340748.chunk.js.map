{"version":3,"sources":["hoc/logProps.js","components/Input/input.statefull.js","components/Input/input.stateless.js","components/Input/input.ant.stateless.js","App.js","serviceWorker.js","index.js"],"names":["getDisplayName","WrappedComponent","displayName","name","logColor","primary","secondary","ternary","logProps","Enhance","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","componentName","inherits","createClass","key","value","console","group","log","props","groupEnd","nextProps","react_default","a","createElement","Component","hoistNonReactStatic","App","state","notes","addNote","e","setState","toConsumableArray","target","changeValue","clearInput","_","noteInput","focus","_this2","map","note","index","onChange","type","onKeyUp","ref","input","onClick","compose","input_stateless","withState","_ref","setNote","setValue","newNotes","lastNote","input_ant_stateless","styled","padding","style","input_statefull","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9340748.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport hoistNonReactStatic from 'hoist-non-react-statics';\n\nfunction getDisplayName(WrappedComponent) {\n  return (\n    WrappedComponent.displayName ||\n    WrappedComponent.name ||\n    'Component'\n  );\n}\n\nconst logColor = {\n  primary: '#006E86',\n  secondary: '#E38300',\n  ternary: '#008718'\n};\n\nfunction logProps(WrappedComponent) {\n  class Enhance extends Component {\n    // component name for react dev tool\n    static displayName = `LogProps(${getDisplayName(\n      WrappedComponent\n    )})`;\n\n    // component name for console.log\n    componentName = getDisplayName(WrappedComponent);\n\n    componentDidMount() {\n      // eslint-disable-next-line no-console\n      console.group(\n        `%cLogProps Component ${\n          this.componentName\n        } method componentDidMount`,\n        `color:${logColor.primary};`\n      );\n      // eslint-disable-next-line no-console\n      console.log(\n        '%cProps',\n        `color:${logColor.primary};`,\n        this.props\n      );\n      // eslint-disable-next-line no-console\n      console.groupEnd();\n    }\n\n    componentWillReceiveProps(nextProps) {\n      // eslint-disable-next-line no-console\n      console.group(\n        `%cLogProps Component ${\n          this.componentName\n        } method componentWillReceiveProps`,\n        `color:${logColor.ternary};`\n      );\n      // eslint-disable-next-line no-console\n      console.log(\n        '%cPrev Props',\n        `color:${logColor.secondary};`,\n        this.props\n      );\n      // eslint-disable-next-line no-console\n      console.log(\n        '%cNext Props',\n        `color:${logColor.ternary};`,\n        nextProps\n      );\n      // eslint-disable-next-line no-console\n      console.groupEnd();\n    }\n\n    render() {\n      return <WrappedComponent {...this.props} />;\n    }\n  }\n\n  return hoistNonReactStatic(Enhance, WrappedComponent);\n}\n\nexport default logProps;\n","import React, { Component } from 'react';\nimport { compose } from 'recompose';\nimport logProps from '../../hoc/logProps';\n\nclass App extends Component {\n  state = {\n    notes: ['note1', 'note2', 'note3'],\n    value: ''\n  };\n\n  componentDidMount() {\n    this.noteInput.focus();\n  }\n\n  addNote = e => {\n    if (e.key === 'Enter') {\n      /**\n       * setState is asynchonus\n       * setState(arg1, arg2)\n       *    arg1 = set state value\n       *    arg2 = call back function work after set state value finish\n       */\n      this.setState(\n        // arg1\n        {\n          notes: [...this.state.notes, e.target.value],\n          value: ''\n        }\n        // arg2\n        // () => {\n        //   const notes = this.state.notes;\n        //   console.log(notes[notes.length - 1]);\n        // }\n      );\n    }\n  };\n\n  changeValue = e => {\n    this.setState({ value: e.target.value });\n  };\n\n  clearInput = _ => {\n    this.setState({ value: '' });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Class Component</h1>\n        <ul>\n          {this.state.notes.map((note, index) => (\n            <li key={index}>{note}</li>\n          ))}\n        </ul>\n        <input\n          value={this.state.value}\n          onChange={this.changeValue}\n          type=\"text\"\n          onKeyUp={this.addNote}\n          ref={input => (this.noteInput = input)}\n        />\n        <button onClick={this.clearInput}>\n          clear input\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default compose(logProps)(App);\n","import React from 'react';\nimport { compose, withState } from 'recompose';\nimport logProps from '../../hoc/logProps';\n\nconst AppStateles = ({\n  notes,\n  value,\n  setNote,\n  setValue\n}) => {\n  const addNote = e => {\n    if (e.key === 'Enter') {\n      const newNotes = [...notes, e.target.value];\n      /**\n       * setNote is asynchonus\n       * setNote(arg1, arg2)\n       *    arg1 = value\n       *    arg2 = call back function work after set value finish\n       */\n      setNote(\n        // arg1\n        newNotes,\n        // arg2\n        () => {\n          const lastNote = newNotes[newNotes.length - 1];\n          console.log('lastNote', lastNote);\n        }\n      );\n      setValue('');\n    }\n  };\n\n  const changeValue = e => {\n    setValue(e.target.value);\n  };\n\n  const clearInput = _ => {\n    setValue('');\n  };\n\n  return (\n    <div>\n      <h1>StateLess Component</h1>\n      <ul>\n        {notes.map((note, index) => (\n          <li key={index}>{note}</li>\n        ))}\n      </ul>\n      <input\n        value={value}\n        onChange={changeValue}\n        type=\"text\"\n        onKeyUp={addNote}\n      />\n      <button onClick={clearInput}>clear input</button>\n    </div>\n  );\n};\n\nexport default compose(\n  withState('notes', 'setNote', [\n    'note1',\n    'note2',\n    'note3'\n  ]),\n  withState('value', 'setValue', ''),\n  logProps\n)(AppStateles);\n","import React from 'react';\nimport { Input } from 'antd';\nimport { compose, withState } from 'recompose';\nimport logProps from '../../hoc/logProps';\n\nconst InputAnt = ({ notes, value, setNote, setValue }) => {\n  const addNote = e => {\n    if (e.key === 'Enter') {\n      const newNotes = [...notes, e.target.value];\n      /**\n       * setNote is asynchonus\n       * setNote(arg1, arg2)\n       *    arg1 = value\n       *    arg2 = call back function work after set value finish\n       */\n      setNote(\n        // arg1\n        newNotes,\n        // arg2\n        () => {\n          const lastNote = newNotes[newNotes.length - 1];\n          console.log('lastNote', lastNote);\n        }\n      );\n      setValue('');\n    }\n  };\n\n  const changeValue = e => {\n    setValue(e.target.value);\n  };\n\n  const clearInput = _ => {\n    setValue('');\n  };\n\n  return (\n    <div>\n      <h1>Ant StateLess Component</h1>\n      <ul>\n        {notes.map((note, index) => (\n          <li key={index}>{note}</li>\n        ))}\n      </ul>\n      <Input\n        value={value}\n        onChange={changeValue}\n        type=\"text\"\n        onKeyUp={addNote}\n      />\n      <button onClick={clearInput}>clear input</button>\n    </div>\n  );\n};\n\nexport default compose(\n  withState('notes', 'setNote', [\n    'note1',\n    'note2',\n    'note3'\n  ]),\n  withState('value', 'setValue', ''),\n  logProps\n)(InputAnt);\n","import React from 'react';\nimport InputStateFull from './components/Input/input.statefull';\nimport InputStateless from './components/Input/input.stateless';\nimport InputAnt from './components/Input/input.ant.stateless';\n\nconst styled = {\n  padding: '1rem'\n};\n\nconst App = () => (\n  <div style={styled}>\n    <InputStateFull />\n    <br />\n    <InputStateless />\n    <br />\n    <InputAnt />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}